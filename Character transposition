First, we use our own split function to form an array of strings.
code's as follows:
import java.util.*;
public class Solution {
    public String ReverseSentence(String str) {
        if(str.length()==0||str==null){
             return str;
        }
        String []a = str.split(" ");
        if(a.length==0){
            return str;
        }
        //char []c=str.toCharArray();
        //Stack<Character> stack = new Stack<Character>();
        //Stack<Character> stack1 = new Stack<Character>();
        String res = "";
        //ArraysList<String> res = new ArraysList<>();
        for(int i=a.length-1;i>0;i--){
            res+=a[i];
            res+=" ";
        }
        res+=a[0];
        return res;
    }
}

On the other hand, we use the idea of transposition similar to recursion to transpose the whole,
and then transpose the internal word by word, taking a space as the word discrimination.
code's as follows:
import java.util.*;
public class Solution {
    public String ReverseSentence(String str) {
        if(str.length()==0||str==null){
             return str;
        }
        char [] c=str.toCharArray();
        reverse(c,0,c.length-1);
        int l=0;
        int i=0;
        while(i<c.length){
            if(c[i]==' '){
                reverse(c,l,i-1);
                i=i+1;
                l=i;
            }
            if(i==c.length-1){
                reverse(c,l,i);
                break;
            }
            i++;
        }
        return  new String(c);
}
    public void reverse(char [] s,int begin,int end){
        int i=begin, j=end;
        for(;i<j;i++,j--){
            char temp=s[i];
            s[i]=s[j];
            s[j]=temp;
        }
    }
}
